# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_rfid_swig', [dirname(__file__)])
        except ImportError:
            import _rfid_swig
            return _rfid_swig
        if fp is not None:
            try:
                _mod = imp.load_module('_rfid_swig', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _rfid_swig = swig_import_helper()
    del swig_import_helper
else:
    import _rfid_swig
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr



def high_res_timer_now():
    """high_res_timer_now() -> gr::high_res_timer_type"""
    return _rfid_swig.high_res_timer_now()

def high_res_timer_now_perfmon():
    """high_res_timer_now_perfmon() -> gr::high_res_timer_type"""
    return _rfid_swig.high_res_timer_now_perfmon()

def high_res_timer_tps():
    """high_res_timer_tps() -> gr::high_res_timer_type"""
    return _rfid_swig.high_res_timer_tps()

def high_res_timer_epoch():
    """high_res_timer_epoch() -> gr::high_res_timer_type"""
    return _rfid_swig.high_res_timer_epoch()
class reader(object):
    """
    The block is responsible for sending commands for transmission.

    It moves between the following states.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def print_results(self):
        """
        print_results(reader self)



        Params: (NONE)
        """
        return _rfid_swig.reader_print_results(self)


    def make(sample_rate, dac_rate):
        """
        make(int sample_rate, int dac_rate) -> reader_sptr

        Return a shared_ptr to a new instance of rfid::reader.

        To avoid accidental use of raw pointers, rfid::reader's constructor is in a private implementation class. rfid::reader::make is the public interface for creating new instances.

        Params: (sample_rate, dac_rate)
        """
        return _rfid_swig.reader_make(sample_rate, dac_rate)

    make = staticmethod(make)
    __swig_destroy__ = _rfid_swig.delete_reader
    __del__ = lambda self: None
reader_swigregister = _rfid_swig.reader_swigregister
reader_swigregister(reader)

def reader_make(sample_rate, dac_rate):
    """
    reader_make(int sample_rate, int dac_rate) -> reader_sptr

    Return a shared_ptr to a new instance of rfid::reader.

    To avoid accidental use of raw pointers, rfid::reader's constructor is in a private implementation class. rfid::reader::make is the public interface for creating new instances.

    Params: (sample_rate, dac_rate)
    """
    return _rfid_swig.reader_make(sample_rate, dac_rate)

class reader_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::rfid::reader)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::rfid::reader)> self) -> reader_sptr
        __init__(boost::shared_ptr<(gr::rfid::reader)> self, reader p) -> reader_sptr
        """
        this = _rfid_swig.new_reader_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(reader_sptr self) -> reader"""
        return _rfid_swig.reader_sptr___deref__(self)

    __swig_destroy__ = _rfid_swig.delete_reader_sptr
    __del__ = lambda self: None

    def print_results(self):
        """
        print_results(reader_sptr self)



        Params: (NONE)
        """
        return _rfid_swig.reader_sptr_print_results(self)


    def make(self, sample_rate, dac_rate):
        """
        make(reader_sptr self, int sample_rate, int dac_rate) -> reader_sptr

        Return a shared_ptr to a new instance of rfid::reader.

        To avoid accidental use of raw pointers, rfid::reader's constructor is in a private implementation class. rfid::reader::make is the public interface for creating new instances.

        Params: (sample_rate, dac_rate)
        """
        return _rfid_swig.reader_sptr_make(self, sample_rate, dac_rate)


    def history(self):
        """history(reader_sptr self) -> unsigned int"""
        return _rfid_swig.reader_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(reader_sptr self, int which, int delay)
        declare_sample_delay(reader_sptr self, unsigned int delay)
        """
        return _rfid_swig.reader_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(reader_sptr self, int which) -> unsigned int"""
        return _rfid_swig.reader_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(reader_sptr self) -> int"""
        return _rfid_swig.reader_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(reader_sptr self) -> double"""
        return _rfid_swig.reader_sptr_relative_rate(self)


    def start(self):
        """start(reader_sptr self) -> bool"""
        return _rfid_swig.reader_sptr_start(self)


    def stop(self):
        """stop(reader_sptr self) -> bool"""
        return _rfid_swig.reader_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(reader_sptr self, unsigned int which_input) -> uint64_t"""
        return _rfid_swig.reader_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(reader_sptr self, unsigned int which_output) -> uint64_t"""
        return _rfid_swig.reader_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(reader_sptr self) -> int"""
        return _rfid_swig.reader_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(reader_sptr self, int m)"""
        return _rfid_swig.reader_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(reader_sptr self)"""
        return _rfid_swig.reader_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(reader_sptr self) -> bool"""
        return _rfid_swig.reader_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(reader_sptr self, int m)"""
        return _rfid_swig.reader_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(reader_sptr self) -> int"""
        return _rfid_swig.reader_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(reader_sptr self, int i) -> long"""
        return _rfid_swig.reader_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(reader_sptr self, long max_output_buffer)
        set_max_output_buffer(reader_sptr self, int port, long max_output_buffer)
        """
        return _rfid_swig.reader_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(reader_sptr self, int i) -> long"""
        return _rfid_swig.reader_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(reader_sptr self, long min_output_buffer)
        set_min_output_buffer(reader_sptr self, int port, long min_output_buffer)
        """
        return _rfid_swig.reader_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(reader_sptr self) -> float"""
        return _rfid_swig.reader_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(reader_sptr self) -> float"""
        return _rfid_swig.reader_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(reader_sptr self) -> float"""
        return _rfid_swig.reader_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(reader_sptr self) -> float"""
        return _rfid_swig.reader_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(reader_sptr self) -> float"""
        return _rfid_swig.reader_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(reader_sptr self) -> float"""
        return _rfid_swig.reader_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(reader_sptr self, int which) -> float
        pc_input_buffers_full(reader_sptr self) -> pmt_vector_float
        """
        return _rfid_swig.reader_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(reader_sptr self, int which) -> float
        pc_input_buffers_full_avg(reader_sptr self) -> pmt_vector_float
        """
        return _rfid_swig.reader_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(reader_sptr self, int which) -> float
        pc_input_buffers_full_var(reader_sptr self) -> pmt_vector_float
        """
        return _rfid_swig.reader_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(reader_sptr self, int which) -> float
        pc_output_buffers_full(reader_sptr self) -> pmt_vector_float
        """
        return _rfid_swig.reader_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(reader_sptr self, int which) -> float
        pc_output_buffers_full_avg(reader_sptr self) -> pmt_vector_float
        """
        return _rfid_swig.reader_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(reader_sptr self, int which) -> float
        pc_output_buffers_full_var(reader_sptr self) -> pmt_vector_float
        """
        return _rfid_swig.reader_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(reader_sptr self) -> float"""
        return _rfid_swig.reader_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(reader_sptr self) -> float"""
        return _rfid_swig.reader_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(reader_sptr self) -> float"""
        return _rfid_swig.reader_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(reader_sptr self) -> float"""
        return _rfid_swig.reader_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(reader_sptr self) -> float"""
        return _rfid_swig.reader_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(reader_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _rfid_swig.reader_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(reader_sptr self)"""
        return _rfid_swig.reader_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(reader_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _rfid_swig.reader_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(reader_sptr self) -> int"""
        return _rfid_swig.reader_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(reader_sptr self) -> int"""
        return _rfid_swig.reader_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(reader_sptr self, int priority) -> int"""
        return _rfid_swig.reader_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(reader_sptr self) -> std::string"""
        return _rfid_swig.reader_sptr_name(self)


    def symbol_name(self):
        """symbol_name(reader_sptr self) -> std::string"""
        return _rfid_swig.reader_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(reader_sptr self) -> io_signature_sptr"""
        return _rfid_swig.reader_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(reader_sptr self) -> io_signature_sptr"""
        return _rfid_swig.reader_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(reader_sptr self) -> long"""
        return _rfid_swig.reader_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(reader_sptr self) -> basic_block_sptr"""
        return _rfid_swig.reader_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(reader_sptr self, int ninputs, int noutputs) -> bool"""
        return _rfid_swig.reader_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(reader_sptr self) -> std::string"""
        return _rfid_swig.reader_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(reader_sptr self, std::string name)"""
        return _rfid_swig.reader_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(reader_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _rfid_swig.reader_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(reader_sptr self) -> swig_int_ptr"""
        return _rfid_swig.reader_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(reader_sptr self) -> swig_int_ptr"""
        return _rfid_swig.reader_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(reader_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _rfid_swig.reader_sptr_message_subscribers(self, which_port)

reader_sptr_swigregister = _rfid_swig.reader_sptr_swigregister
reader_sptr_swigregister(reader_sptr)


reader_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
reader = reader.make;

class gate(object):
    """
    The block is responsible for identifying a reader's command.

    The samples related to a reader's command are blocked and consumed. Samples that belong to a Tag's message (RN16-EPC) are forwarded to the next block for further processing.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(sample_rate):
        """
        make(int sample_rate) -> gate_sptr

        Return a shared_ptr to a new instance of rfid::gate.

        To avoid accidental use of raw pointers, rfid::gate's constructor is in a private implementation class. rfid::gate::make is the public interface for creating new instances.

        Params: (sample_rate)
        """
        return _rfid_swig.gate_make(sample_rate)

    make = staticmethod(make)
    __swig_destroy__ = _rfid_swig.delete_gate
    __del__ = lambda self: None
gate_swigregister = _rfid_swig.gate_swigregister
gate_swigregister(gate)

def gate_make(sample_rate):
    """
    gate_make(int sample_rate) -> gate_sptr

    Return a shared_ptr to a new instance of rfid::gate.

    To avoid accidental use of raw pointers, rfid::gate's constructor is in a private implementation class. rfid::gate::make is the public interface for creating new instances.

    Params: (sample_rate)
    """
    return _rfid_swig.gate_make(sample_rate)

class gate_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::rfid::gate)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::rfid::gate)> self) -> gate_sptr
        __init__(boost::shared_ptr<(gr::rfid::gate)> self, gate p) -> gate_sptr
        """
        this = _rfid_swig.new_gate_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(gate_sptr self) -> gate"""
        return _rfid_swig.gate_sptr___deref__(self)

    __swig_destroy__ = _rfid_swig.delete_gate_sptr
    __del__ = lambda self: None

    def make(self, sample_rate):
        """
        make(gate_sptr self, int sample_rate) -> gate_sptr

        Return a shared_ptr to a new instance of rfid::gate.

        To avoid accidental use of raw pointers, rfid::gate's constructor is in a private implementation class. rfid::gate::make is the public interface for creating new instances.

        Params: (sample_rate)
        """
        return _rfid_swig.gate_sptr_make(self, sample_rate)


    def history(self):
        """history(gate_sptr self) -> unsigned int"""
        return _rfid_swig.gate_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(gate_sptr self, int which, int delay)
        declare_sample_delay(gate_sptr self, unsigned int delay)
        """
        return _rfid_swig.gate_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(gate_sptr self, int which) -> unsigned int"""
        return _rfid_swig.gate_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(gate_sptr self) -> int"""
        return _rfid_swig.gate_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(gate_sptr self) -> double"""
        return _rfid_swig.gate_sptr_relative_rate(self)


    def start(self):
        """start(gate_sptr self) -> bool"""
        return _rfid_swig.gate_sptr_start(self)


    def stop(self):
        """stop(gate_sptr self) -> bool"""
        return _rfid_swig.gate_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(gate_sptr self, unsigned int which_input) -> uint64_t"""
        return _rfid_swig.gate_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(gate_sptr self, unsigned int which_output) -> uint64_t"""
        return _rfid_swig.gate_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(gate_sptr self) -> int"""
        return _rfid_swig.gate_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(gate_sptr self, int m)"""
        return _rfid_swig.gate_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(gate_sptr self)"""
        return _rfid_swig.gate_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(gate_sptr self) -> bool"""
        return _rfid_swig.gate_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(gate_sptr self, int m)"""
        return _rfid_swig.gate_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(gate_sptr self) -> int"""
        return _rfid_swig.gate_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(gate_sptr self, int i) -> long"""
        return _rfid_swig.gate_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(gate_sptr self, long max_output_buffer)
        set_max_output_buffer(gate_sptr self, int port, long max_output_buffer)
        """
        return _rfid_swig.gate_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(gate_sptr self, int i) -> long"""
        return _rfid_swig.gate_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(gate_sptr self, long min_output_buffer)
        set_min_output_buffer(gate_sptr self, int port, long min_output_buffer)
        """
        return _rfid_swig.gate_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(gate_sptr self) -> float"""
        return _rfid_swig.gate_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(gate_sptr self) -> float"""
        return _rfid_swig.gate_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(gate_sptr self) -> float"""
        return _rfid_swig.gate_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(gate_sptr self) -> float"""
        return _rfid_swig.gate_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(gate_sptr self) -> float"""
        return _rfid_swig.gate_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(gate_sptr self) -> float"""
        return _rfid_swig.gate_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(gate_sptr self, int which) -> float
        pc_input_buffers_full(gate_sptr self) -> pmt_vector_float
        """
        return _rfid_swig.gate_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(gate_sptr self, int which) -> float
        pc_input_buffers_full_avg(gate_sptr self) -> pmt_vector_float
        """
        return _rfid_swig.gate_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(gate_sptr self, int which) -> float
        pc_input_buffers_full_var(gate_sptr self) -> pmt_vector_float
        """
        return _rfid_swig.gate_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(gate_sptr self, int which) -> float
        pc_output_buffers_full(gate_sptr self) -> pmt_vector_float
        """
        return _rfid_swig.gate_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(gate_sptr self, int which) -> float
        pc_output_buffers_full_avg(gate_sptr self) -> pmt_vector_float
        """
        return _rfid_swig.gate_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(gate_sptr self, int which) -> float
        pc_output_buffers_full_var(gate_sptr self) -> pmt_vector_float
        """
        return _rfid_swig.gate_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(gate_sptr self) -> float"""
        return _rfid_swig.gate_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(gate_sptr self) -> float"""
        return _rfid_swig.gate_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(gate_sptr self) -> float"""
        return _rfid_swig.gate_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(gate_sptr self) -> float"""
        return _rfid_swig.gate_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(gate_sptr self) -> float"""
        return _rfid_swig.gate_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(gate_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _rfid_swig.gate_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(gate_sptr self)"""
        return _rfid_swig.gate_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(gate_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _rfid_swig.gate_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(gate_sptr self) -> int"""
        return _rfid_swig.gate_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(gate_sptr self) -> int"""
        return _rfid_swig.gate_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(gate_sptr self, int priority) -> int"""
        return _rfid_swig.gate_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(gate_sptr self) -> std::string"""
        return _rfid_swig.gate_sptr_name(self)


    def symbol_name(self):
        """symbol_name(gate_sptr self) -> std::string"""
        return _rfid_swig.gate_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(gate_sptr self) -> io_signature_sptr"""
        return _rfid_swig.gate_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(gate_sptr self) -> io_signature_sptr"""
        return _rfid_swig.gate_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(gate_sptr self) -> long"""
        return _rfid_swig.gate_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(gate_sptr self) -> basic_block_sptr"""
        return _rfid_swig.gate_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(gate_sptr self, int ninputs, int noutputs) -> bool"""
        return _rfid_swig.gate_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(gate_sptr self) -> std::string"""
        return _rfid_swig.gate_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(gate_sptr self, std::string name)"""
        return _rfid_swig.gate_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(gate_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _rfid_swig.gate_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(gate_sptr self) -> swig_int_ptr"""
        return _rfid_swig.gate_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(gate_sptr self) -> swig_int_ptr"""
        return _rfid_swig.gate_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(gate_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _rfid_swig.gate_sptr_message_subscribers(self, which_port)

gate_sptr_swigregister = _rfid_swig.gate_sptr_swigregister
gate_sptr_swigregister(gate_sptr)


gate_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
gate = gate.make;

class tag_decoder(object):
    """<+description of block+>"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(sample_rate):
        """
        make(int sample_rate) -> tag_decoder_sptr

        Return a shared_ptr to a new instance of rfid::tag_decoder.

        To avoid accidental use of raw pointers, rfid::tag_decoder's constructor is in a private implementation class. rfid::tag_decoder::make is the public interface for creating new instances.

        Params: (sample_rate)
        """
        return _rfid_swig.tag_decoder_make(sample_rate)

    make = staticmethod(make)
    __swig_destroy__ = _rfid_swig.delete_tag_decoder
    __del__ = lambda self: None
tag_decoder_swigregister = _rfid_swig.tag_decoder_swigregister
tag_decoder_swigregister(tag_decoder)

def tag_decoder_make(sample_rate):
    """
    tag_decoder_make(int sample_rate) -> tag_decoder_sptr

    Return a shared_ptr to a new instance of rfid::tag_decoder.

    To avoid accidental use of raw pointers, rfid::tag_decoder's constructor is in a private implementation class. rfid::tag_decoder::make is the public interface for creating new instances.

    Params: (sample_rate)
    """
    return _rfid_swig.tag_decoder_make(sample_rate)

class tag_decoder_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::rfid::tag_decoder)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::rfid::tag_decoder)> self) -> tag_decoder_sptr
        __init__(boost::shared_ptr<(gr::rfid::tag_decoder)> self, tag_decoder p) -> tag_decoder_sptr
        """
        this = _rfid_swig.new_tag_decoder_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(tag_decoder_sptr self) -> tag_decoder"""
        return _rfid_swig.tag_decoder_sptr___deref__(self)

    __swig_destroy__ = _rfid_swig.delete_tag_decoder_sptr
    __del__ = lambda self: None

    def make(self, sample_rate):
        """
        make(tag_decoder_sptr self, int sample_rate) -> tag_decoder_sptr

        Return a shared_ptr to a new instance of rfid::tag_decoder.

        To avoid accidental use of raw pointers, rfid::tag_decoder's constructor is in a private implementation class. rfid::tag_decoder::make is the public interface for creating new instances.

        Params: (sample_rate)
        """
        return _rfid_swig.tag_decoder_sptr_make(self, sample_rate)


    def history(self):
        """history(tag_decoder_sptr self) -> unsigned int"""
        return _rfid_swig.tag_decoder_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(tag_decoder_sptr self, int which, int delay)
        declare_sample_delay(tag_decoder_sptr self, unsigned int delay)
        """
        return _rfid_swig.tag_decoder_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(tag_decoder_sptr self, int which) -> unsigned int"""
        return _rfid_swig.tag_decoder_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(tag_decoder_sptr self) -> int"""
        return _rfid_swig.tag_decoder_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(tag_decoder_sptr self) -> double"""
        return _rfid_swig.tag_decoder_sptr_relative_rate(self)


    def start(self):
        """start(tag_decoder_sptr self) -> bool"""
        return _rfid_swig.tag_decoder_sptr_start(self)


    def stop(self):
        """stop(tag_decoder_sptr self) -> bool"""
        return _rfid_swig.tag_decoder_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(tag_decoder_sptr self, unsigned int which_input) -> uint64_t"""
        return _rfid_swig.tag_decoder_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(tag_decoder_sptr self, unsigned int which_output) -> uint64_t"""
        return _rfid_swig.tag_decoder_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(tag_decoder_sptr self) -> int"""
        return _rfid_swig.tag_decoder_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(tag_decoder_sptr self, int m)"""
        return _rfid_swig.tag_decoder_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(tag_decoder_sptr self)"""
        return _rfid_swig.tag_decoder_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(tag_decoder_sptr self) -> bool"""
        return _rfid_swig.tag_decoder_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(tag_decoder_sptr self, int m)"""
        return _rfid_swig.tag_decoder_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(tag_decoder_sptr self) -> int"""
        return _rfid_swig.tag_decoder_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(tag_decoder_sptr self, int i) -> long"""
        return _rfid_swig.tag_decoder_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(tag_decoder_sptr self, long max_output_buffer)
        set_max_output_buffer(tag_decoder_sptr self, int port, long max_output_buffer)
        """
        return _rfid_swig.tag_decoder_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(tag_decoder_sptr self, int i) -> long"""
        return _rfid_swig.tag_decoder_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(tag_decoder_sptr self, long min_output_buffer)
        set_min_output_buffer(tag_decoder_sptr self, int port, long min_output_buffer)
        """
        return _rfid_swig.tag_decoder_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(tag_decoder_sptr self) -> float"""
        return _rfid_swig.tag_decoder_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(tag_decoder_sptr self) -> float"""
        return _rfid_swig.tag_decoder_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(tag_decoder_sptr self) -> float"""
        return _rfid_swig.tag_decoder_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(tag_decoder_sptr self) -> float"""
        return _rfid_swig.tag_decoder_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(tag_decoder_sptr self) -> float"""
        return _rfid_swig.tag_decoder_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(tag_decoder_sptr self) -> float"""
        return _rfid_swig.tag_decoder_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(tag_decoder_sptr self, int which) -> float
        pc_input_buffers_full(tag_decoder_sptr self) -> pmt_vector_float
        """
        return _rfid_swig.tag_decoder_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(tag_decoder_sptr self, int which) -> float
        pc_input_buffers_full_avg(tag_decoder_sptr self) -> pmt_vector_float
        """
        return _rfid_swig.tag_decoder_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(tag_decoder_sptr self, int which) -> float
        pc_input_buffers_full_var(tag_decoder_sptr self) -> pmt_vector_float
        """
        return _rfid_swig.tag_decoder_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(tag_decoder_sptr self, int which) -> float
        pc_output_buffers_full(tag_decoder_sptr self) -> pmt_vector_float
        """
        return _rfid_swig.tag_decoder_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(tag_decoder_sptr self, int which) -> float
        pc_output_buffers_full_avg(tag_decoder_sptr self) -> pmt_vector_float
        """
        return _rfid_swig.tag_decoder_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(tag_decoder_sptr self, int which) -> float
        pc_output_buffers_full_var(tag_decoder_sptr self) -> pmt_vector_float
        """
        return _rfid_swig.tag_decoder_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(tag_decoder_sptr self) -> float"""
        return _rfid_swig.tag_decoder_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(tag_decoder_sptr self) -> float"""
        return _rfid_swig.tag_decoder_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(tag_decoder_sptr self) -> float"""
        return _rfid_swig.tag_decoder_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(tag_decoder_sptr self) -> float"""
        return _rfid_swig.tag_decoder_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(tag_decoder_sptr self) -> float"""
        return _rfid_swig.tag_decoder_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(tag_decoder_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _rfid_swig.tag_decoder_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(tag_decoder_sptr self)"""
        return _rfid_swig.tag_decoder_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(tag_decoder_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _rfid_swig.tag_decoder_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(tag_decoder_sptr self) -> int"""
        return _rfid_swig.tag_decoder_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(tag_decoder_sptr self) -> int"""
        return _rfid_swig.tag_decoder_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(tag_decoder_sptr self, int priority) -> int"""
        return _rfid_swig.tag_decoder_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(tag_decoder_sptr self) -> std::string"""
        return _rfid_swig.tag_decoder_sptr_name(self)


    def symbol_name(self):
        """symbol_name(tag_decoder_sptr self) -> std::string"""
        return _rfid_swig.tag_decoder_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(tag_decoder_sptr self) -> io_signature_sptr"""
        return _rfid_swig.tag_decoder_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(tag_decoder_sptr self) -> io_signature_sptr"""
        return _rfid_swig.tag_decoder_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(tag_decoder_sptr self) -> long"""
        return _rfid_swig.tag_decoder_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(tag_decoder_sptr self) -> basic_block_sptr"""
        return _rfid_swig.tag_decoder_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(tag_decoder_sptr self, int ninputs, int noutputs) -> bool"""
        return _rfid_swig.tag_decoder_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(tag_decoder_sptr self) -> std::string"""
        return _rfid_swig.tag_decoder_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(tag_decoder_sptr self, std::string name)"""
        return _rfid_swig.tag_decoder_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(tag_decoder_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _rfid_swig.tag_decoder_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(tag_decoder_sptr self) -> swig_int_ptr"""
        return _rfid_swig.tag_decoder_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(tag_decoder_sptr self) -> swig_int_ptr"""
        return _rfid_swig.tag_decoder_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(tag_decoder_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _rfid_swig.tag_decoder_sptr_message_subscribers(self, which_port)

tag_decoder_sptr_swigregister = _rfid_swig.tag_decoder_sptr_swigregister
tag_decoder_sptr_swigregister(tag_decoder_sptr)


tag_decoder_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
tag_decoder = tag_decoder.make;

class wifi_control(object):
    """Proxy of C++ gr::rfid::wifi_control class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make():
        """make() -> wifi_control_sptr"""
        return _rfid_swig.wifi_control_make()

    make = staticmethod(make)
    __swig_destroy__ = _rfid_swig.delete_wifi_control
    __del__ = lambda self: None
wifi_control_swigregister = _rfid_swig.wifi_control_swigregister
wifi_control_swigregister(wifi_control)

def wifi_control_make():
    """wifi_control_make() -> wifi_control_sptr"""
    return _rfid_swig.wifi_control_make()

class wifi_control_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::rfid::wifi_control)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::rfid::wifi_control)> self) -> wifi_control_sptr
        __init__(boost::shared_ptr<(gr::rfid::wifi_control)> self, wifi_control p) -> wifi_control_sptr
        """
        this = _rfid_swig.new_wifi_control_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(wifi_control_sptr self) -> wifi_control"""
        return _rfid_swig.wifi_control_sptr___deref__(self)

    __swig_destroy__ = _rfid_swig.delete_wifi_control_sptr
    __del__ = lambda self: None

    def make(self):
        """make(wifi_control_sptr self) -> wifi_control_sptr"""
        return _rfid_swig.wifi_control_sptr_make(self)


    def history(self):
        """history(wifi_control_sptr self) -> unsigned int"""
        return _rfid_swig.wifi_control_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(wifi_control_sptr self, int which, int delay)
        declare_sample_delay(wifi_control_sptr self, unsigned int delay)
        """
        return _rfid_swig.wifi_control_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(wifi_control_sptr self, int which) -> unsigned int"""
        return _rfid_swig.wifi_control_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(wifi_control_sptr self) -> int"""
        return _rfid_swig.wifi_control_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(wifi_control_sptr self) -> double"""
        return _rfid_swig.wifi_control_sptr_relative_rate(self)


    def start(self):
        """start(wifi_control_sptr self) -> bool"""
        return _rfid_swig.wifi_control_sptr_start(self)


    def stop(self):
        """stop(wifi_control_sptr self) -> bool"""
        return _rfid_swig.wifi_control_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(wifi_control_sptr self, unsigned int which_input) -> uint64_t"""
        return _rfid_swig.wifi_control_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(wifi_control_sptr self, unsigned int which_output) -> uint64_t"""
        return _rfid_swig.wifi_control_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(wifi_control_sptr self) -> int"""
        return _rfid_swig.wifi_control_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(wifi_control_sptr self, int m)"""
        return _rfid_swig.wifi_control_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(wifi_control_sptr self)"""
        return _rfid_swig.wifi_control_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(wifi_control_sptr self) -> bool"""
        return _rfid_swig.wifi_control_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(wifi_control_sptr self, int m)"""
        return _rfid_swig.wifi_control_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(wifi_control_sptr self) -> int"""
        return _rfid_swig.wifi_control_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(wifi_control_sptr self, int i) -> long"""
        return _rfid_swig.wifi_control_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(wifi_control_sptr self, long max_output_buffer)
        set_max_output_buffer(wifi_control_sptr self, int port, long max_output_buffer)
        """
        return _rfid_swig.wifi_control_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(wifi_control_sptr self, int i) -> long"""
        return _rfid_swig.wifi_control_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(wifi_control_sptr self, long min_output_buffer)
        set_min_output_buffer(wifi_control_sptr self, int port, long min_output_buffer)
        """
        return _rfid_swig.wifi_control_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(wifi_control_sptr self) -> float"""
        return _rfid_swig.wifi_control_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(wifi_control_sptr self) -> float"""
        return _rfid_swig.wifi_control_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(wifi_control_sptr self) -> float"""
        return _rfid_swig.wifi_control_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(wifi_control_sptr self) -> float"""
        return _rfid_swig.wifi_control_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(wifi_control_sptr self) -> float"""
        return _rfid_swig.wifi_control_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(wifi_control_sptr self) -> float"""
        return _rfid_swig.wifi_control_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(wifi_control_sptr self, int which) -> float
        pc_input_buffers_full(wifi_control_sptr self) -> pmt_vector_float
        """
        return _rfid_swig.wifi_control_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(wifi_control_sptr self, int which) -> float
        pc_input_buffers_full_avg(wifi_control_sptr self) -> pmt_vector_float
        """
        return _rfid_swig.wifi_control_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(wifi_control_sptr self, int which) -> float
        pc_input_buffers_full_var(wifi_control_sptr self) -> pmt_vector_float
        """
        return _rfid_swig.wifi_control_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(wifi_control_sptr self, int which) -> float
        pc_output_buffers_full(wifi_control_sptr self) -> pmt_vector_float
        """
        return _rfid_swig.wifi_control_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(wifi_control_sptr self, int which) -> float
        pc_output_buffers_full_avg(wifi_control_sptr self) -> pmt_vector_float
        """
        return _rfid_swig.wifi_control_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(wifi_control_sptr self, int which) -> float
        pc_output_buffers_full_var(wifi_control_sptr self) -> pmt_vector_float
        """
        return _rfid_swig.wifi_control_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(wifi_control_sptr self) -> float"""
        return _rfid_swig.wifi_control_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(wifi_control_sptr self) -> float"""
        return _rfid_swig.wifi_control_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(wifi_control_sptr self) -> float"""
        return _rfid_swig.wifi_control_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(wifi_control_sptr self) -> float"""
        return _rfid_swig.wifi_control_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(wifi_control_sptr self) -> float"""
        return _rfid_swig.wifi_control_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(wifi_control_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _rfid_swig.wifi_control_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(wifi_control_sptr self)"""
        return _rfid_swig.wifi_control_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(wifi_control_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _rfid_swig.wifi_control_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(wifi_control_sptr self) -> int"""
        return _rfid_swig.wifi_control_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(wifi_control_sptr self) -> int"""
        return _rfid_swig.wifi_control_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(wifi_control_sptr self, int priority) -> int"""
        return _rfid_swig.wifi_control_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(wifi_control_sptr self) -> std::string"""
        return _rfid_swig.wifi_control_sptr_name(self)


    def symbol_name(self):
        """symbol_name(wifi_control_sptr self) -> std::string"""
        return _rfid_swig.wifi_control_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(wifi_control_sptr self) -> io_signature_sptr"""
        return _rfid_swig.wifi_control_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(wifi_control_sptr self) -> io_signature_sptr"""
        return _rfid_swig.wifi_control_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(wifi_control_sptr self) -> long"""
        return _rfid_swig.wifi_control_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(wifi_control_sptr self) -> basic_block_sptr"""
        return _rfid_swig.wifi_control_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(wifi_control_sptr self, int ninputs, int noutputs) -> bool"""
        return _rfid_swig.wifi_control_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(wifi_control_sptr self) -> std::string"""
        return _rfid_swig.wifi_control_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(wifi_control_sptr self, std::string name)"""
        return _rfid_swig.wifi_control_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(wifi_control_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _rfid_swig.wifi_control_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(wifi_control_sptr self) -> swig_int_ptr"""
        return _rfid_swig.wifi_control_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(wifi_control_sptr self) -> swig_int_ptr"""
        return _rfid_swig.wifi_control_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(wifi_control_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _rfid_swig.wifi_control_sptr_message_subscribers(self, which_port)

wifi_control_sptr_swigregister = _rfid_swig.wifi_control_sptr_swigregister
wifi_control_sptr_swigregister(wifi_control_sptr)


wifi_control_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
wifi_control = wifi_control.make;



